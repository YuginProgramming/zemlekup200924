import { dataBot } from './values.js';
import {  keyboards } from './language_ua.js';
import { bot } from "./app.js";
import { logger } from './logger/index.js';
import { messageText, messageTextCompleate } from './modules/ordermessage.js';
import { findLotByBotId, updateStatusAndUserIdBybot_id } from './models/lots.js';
import { updateStatusColumnById } from './modules/updateStatusColumnById.js';
import { clearResrvBybot_id } from './models/reservations.js';
import { moveWaitlistOneStepInFront, sendSoldToWaitingIDs } from './modules/waitinglist.js';

//–¶–µ–π —Ñ–∞–π–ª –ø—Ä–∞—Ü—é—î –Ω–∞ bot_id –Ü –≤–∏—á–∏—â–µ–Ω–∏–π –≤—ñ–¥ —Å–º—ñ—Ç—Ç—è

const reservReminderTimerScript = async (bot_id, chat_id) => {
    setTimeout(async () => {

        const lotData = await findLotByBotId(bot_id);
        const message = messageText(lotData);

        if (lotData?.lot_status === 'reserve') {
            try {
                await bot.sendMessage(chat_id, '–í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –¥—ñ–ª—è–Ω–∫—É, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ù–µ–∑–∞–±–∞—Ä–æ–º –¥—ñ–ª—è–Ω–∫–∞ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º');
                await bot.sendMessage(chat_id, message, { reply_markup: { inline_keyboard: [[{ text: "–ö—É–ø–∏—Ç–∏ –¥—ñ–ª—è–Ω–∫—É", callback_data: `${lotData?.lotNumber}` }]] } });
                logger.info(`USER ID: ${chat_id}  received first reminder about lotID: ${bot_id}`);
            } catch (error) {
                logger.error(`Impossible to send remind about lotID: ${bot_id}. Error: ${err}`);
            }

            setTimeout(async () => {
                const lotData = await findLotByBotId(bot_id);

                if (lotData?.lot_status === 'reserve') {
                    try {
                        bot.sendMessage(chat_id, '–î—ñ–ª—è–Ω–∫–∞ —è–∫—É –≤–∏ –±—Ä–æ–Ω—é–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');

                        await updateStatusColumnById('new', bot_id);
                        await updateStatusAndUserIdBybot_id(bot_id, 'new', '');

                        //await moveWaitlistOneStepInFront(bot_id);
                        //await sendSoldToWaitingIDs(bot_id)

                        await clearResrvBybot_id(bot_id);

                        await editingMessageKeyboard(bot_id, "–ó–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞ üòâ \n ");

                        await bot.sendMessage(chat_id, message, { reply_markup: { inline_keyboard: [[{ text: "–ö—É–ø–∏—Ç–∏ –¥—ñ–ª—è–Ω–∫—É", callback_data: `${lotData?.lotNumber}` }]] } });
                        logger.info(`USERID: ${chat_id} received second reminder about lotID${bot_id}. Lot avaliable for selling again ‚õµ`);
                    } catch (error) {
                        logger.error(`Impossible to send remind about lotID${bot_id}. Error: ${error}`);
                    }

                    setTimeout(async () => {
                        const lotData = await findLotByBotId(bot_id);
                        if (lotData?.lot_status === 'new') {
                            try {
                                await bot.sendMessage(chat_id, '–î—ñ–ª—è–Ω–∫–∞ —è–∫–æ—é –≤–∏ —Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å —â–µ –Ω–µ –ø—Ä–æ–¥–∞–Ω–∞');
                                await bot.sendMessage(chat_id, message, { reply_markup: { inline_keyboard: [[{ text: "–ö—É–ø–∏—Ç–∏ –¥—ñ–ª—è–Ω–∫—É", callback_data: `${lotData?.lotNumber}` }]] } });
                                logger.info(`USERID: ${chat_id} received LAST CHANCE üö∏ remind about lot${lotData?.lotNumber}`);
                            } catch (error) {
                                logger.error(`Impossible to send remind about lot#${rowNumber}. Error: ${err}`);
                            }
                        } else return false;

                    }, dataBot.lastChanceFirst);

                } else return false;

            }, dataBot.secondReminder);

        } else return false;

    }, dataBot.firstReminder);
}

const editingMessage = async (bot_id, note) => {
    const lotData = await findLotByBotId(bot_id);

    const message = messageText(lotData);
    const newMessage = `${note + message}`;
    
    try {
        await bot.editMessageText(newMessage, {chat_id: dataBot.channelId, message_id: lotData?.message_id});
    } catch (error) {
        logger.warn(`–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${lotData?.message_id}. Reason: ${error}`);
    }
  } 

  const editingMessageKeyboard = async (bot_id, note) => {
    const lotData = await findLotByBotId(bot_id);

    const message = messageText(lotData);
    const newMessage = `${note + message}`;
    
    try {
        await bot.editMessageText(newMessage, {chat_id: dataBot.channelId, message_id: lotData?.message_id, reply_markup: keyboards.channelKeyboard });
    } catch (error) {
        logger.warn(`–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${lotData?.message_id}. Reason: ${error}`);
    }
  } 

const editingMessageCompleate = async (bot_id, note) => {
    const lotData = await findLotByBotId(bot_id);

    const message = messageTextCompleate(lotData);
    const newMessage = `${note + message}`;
    
    try {
        await bot.editMessageText(newMessage, {chat_id: dataBot.channelId, message_id: lotData?.message_id});
    } catch (error) {
        logger.warn(`–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${lotData?.message_id}. Reason: ${error}`);
    }
  } 

export { editingMessage, reservReminderTimerScript, editingMessageCompleate };